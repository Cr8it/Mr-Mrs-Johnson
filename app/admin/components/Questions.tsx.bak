"use client"

import { useState } from "react"
import { useToast } from "@/components/ui/use-toast"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { X } from "lucide-react"
import { QuestionType } from "./types"

interface Question {
	id: string
	question: string
	type: QuestionType
	options: string
	perGuest: boolean
}

export default function Questions() {
	const [questions, setQuestions] = useState<Question[]>([])
	const [loading, setLoading] = useState(true)
	const { toast } = useToast()

	// Load questions on component mount
	useState(() => {
		fetchQuestions()
	}, [])

	const fetchQuestions = async () => {
		try {
			const response = await fetch("/api/admin/questions")
			if (!response.ok) throw new Error("Failed to fetch questions")
			const data = await response.json()
			setQuestions(data)
		} catch (error) {
			console.error("Error fetching questions:", error)
			toast({
				variant: "destructive",
				title: "Error",
				description: "Failed to load questions",
			})
		} finally {
			setLoading(false)
		}
	}

	const handleAddQuestion = () => {
		const newQuestion: Question = {
			id: `temp-${Date.now()}`, // Temporary ID until saved
			question: "",
			type: QuestionType.TEXT,
			options: "",
			perGuest: false,
		}
		setQuestions([...questions, newQuestion])
	}

	const handleRemoveQuestion = async (id: string) => {
		try {
			if (!id.startsWith("temp-")) {
				const response = await fetch(`/api/admin/questions/${id}`, {
					method: "DELETE",
				})
				if (!response.ok) throw new Error("Failed to delete question")
			}
			setQuestions(questions.filter((q) => q.id !== id))
			toast({
				title: "Success",
				description: "Question deleted successfully",
			})
		} catch (error) {
			console.error("Error deleting question:", error)
			toast({
				variant: "destructive",
				title: "Error",
				description: "Failed to delete question",
			})
		}
	}

	const handleQuestionChange = (
		id: string,
		field: keyof Question,
		value: string | boolean
	) => {
		setQuestions(
			questions.map((q) =>
				q.id === id
					? {
							...q,
							[field]: value,
							// Reset options when changing type to non-multiple choice
							...(field === "type" &&
								value !== QuestionType.MULTIPLE_CHOICE && { options: "" }),
						}
					: q
			)
		)
	}

	const handleSave = async () => {
		try {
			const response = await fetch("/api/admin/questions", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify(questions),
			})

			if (!response.ok) throw new Error("Failed to save questions")

			const savedQuestions = await response.json()
			setQuestions(savedQuestions)

			toast({
				title: "Success",
				description: "Questions saved successfully",
			})
		} catch (error) {
			console.error("Error saving questions:", error)
			toast({
				variant: "destructive",
				title: "Error",
				description: "Failed to save questions",
			})
		}
	}

	if (loading) {
		return <div>Loading...</div>
	}

	return (
		<div className="space-y-4">
			<div className="flex justify-between items-center">
				<h2 className="text-2xl font-bold">Questions</h2>
				<div className="space-x-2">
					<Button onClick={handleAddQuestion}>Add Question</Button>
					<Button onClick={handleSave}>Save All</Button>
				</div>
			</div>

			<div className="space-y-4">
				{questions.map((question) => (
					<Card key={question.id}>
						<CardHeader className="flex flex-row items-start justify-between space-y-0">
							<Button
								variant="ghost"
								size="icon"
								onClick={() => handleRemoveQuestion(question.id)}
								className="hover:bg-destructive hover:text-destructive-foreground"
							>
								<X className="h-4 w-4" />
							</Button>
						</CardHeader>
						<CardContent className="space-y-4">
							<div className="grid gap-4">
								<div className="space-y-2">
									<Input
										placeholder="Enter question"
										value={question.question}
										onChange={(e) =>
											handleQuestionChange(question.id, "question", e.target.value)
										}
									/>
								</div>

								<div className="flex items-center space-x-2">
									<Switch
										id={`per-guest-${question.id}`}
										checked={question.perGuest}
										onCheckedChange={(checked) =>
											handleQuestionChange(question.id, "perGuest", checked)
										}
									/>
									<Label htmlFor={`per-guest-${question.id}`}>
										Ask for each guest
									</Label>
								</div>

								<div className="space-y-2">
									<Label>Question Type</Label>
									<Select
										value={question.type}
										onValueChange={(value) =>
											handleQuestionChange(question.id, "type", value)
										}
									>
										<SelectTrigger>
											<SelectValue />
										</SelectTrigger>
										<SelectContent>
											<SelectItem value={QuestionType.TEXT}>Text</SelectItem>
											<SelectItem value={QuestionType.MULTIPLE_CHOICE}>
												Multiple Choice
											</SelectItem>
											<SelectItem value={QuestionType.BOOLEAN}>
												Yes/No
											</SelectItem>
											<SelectItem value={QuestionType.DATE}>Date</SelectItem>
										</SelectContent>
									</Select>
								</div>

								{question.type === QuestionType.MULTIPLE_CHOICE && (
									<div className="space-y-2">
										<Label>Options (comma-separated)</Label>
										<Input
											placeholder="Option 1, Option 2, Option 3"
											value={question.options}
											onChange={(e) =>
												handleQuestionChange(
													question.id,
													"options",
													e.target.value
												)
											}
										/>
									</div>
								)}
							</div>
						</CardContent>
					</Card>
				))}
			</div>
		</div>
	)
}