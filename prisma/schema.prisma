generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  extensions = []
}

model Household {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guests    Guest[]

  @@index([name])
}

model MealOption {
  id           String   @id @default(cuid())
  name         String
  isActive     Boolean  @default(true)
  isChildOption Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  guests       Guest[]  @relation("GuestMeal")
}

model DessertOption {
  id           String   @id @default(cuid())
  name         String
  isActive     Boolean  @default(true)
  isChildOption Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  guests       Guest[]  @relation("GuestDessert")
}

model Guest {
  id              String             @id @default(cuid())
  name            String
  email           String?
  isAttending     Boolean?
  mealOptionId    String?
  dessertOptionId String?
  dietaryNotes    String?
  householdId     String
  isChild         Boolean           @default(false)
  isTeenager      Boolean           @default(false)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  household       Household          @relation(fields: [householdId], references: [id])
  dessertChoice   DessertOption?     @relation("GuestDessert", fields: [dessertOptionId], references: [id])
  mealChoice      MealOption?        @relation("GuestMeal", fields: [mealOptionId], references: [id])
  responses       QuestionResponse[]
  activities      GuestActivity[]

  @@index([name])
}

model GuestActivity {
  id        String   @id @default(cuid())
  guestId   String
  action    String   // RSVP_YES, RSVP_NO, UPDATE_MEAL, UPDATE_DESSERT, UPDATE_DETAILS
  details   String?  // Additional details about the change
  createdAt DateTime @default(now())
  guest     Guest    @relation(fields: [guestId], references: [id])

  @@index([guestId])
  @@index([createdAt])
}

model Question {
  id         String             @id @default(cuid())
  question   String
  type       String
  options    String            @default("")
  isRequired Boolean           @default(false)
  isActive   Boolean           @default(true)
  perGuest   Boolean           @default(false)
  order      Int               @default(0)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  responses  QuestionResponse[]

  @@index([order])
}


model QuestionResponse {
  id         String   @id @default(cuid())
  questionId String
  guestId    String
  answer     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  guest      Guest    @relation(fields: [guestId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
}

model Settings {
  id             Int       @id @default(1)
  weddingDate    DateTime?
  ceremonyTime   String?
  receptionTime  String?
  venueName      String?
  venueAddress   String?
  primaryColor   String    @default("#d4af37")
  accentColor    String    @default("#000000")
  backgroundImage String?
  showGallery    Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([id])
}

model BridalPartyMember {
  id          String   @id @default(cuid())
  name        String
  role        String
  description String
  imageUrl    String
  type        String   // 'bridesmaid' or 'groomsman'
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type, order])
}
